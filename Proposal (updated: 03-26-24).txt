LIST OF TASKS 

Project Planning and Ideation: (EVERYONE) 

Brainstorm the app’s features and unique value proposition (UVP). 

Decide on the target audience (e.g., travelers, outdoor enthusiasts, local residents). 

Plan the overall app architecture and user flow. 

Front-End Development: (EVERYONE) 

HTML/CSS Design:  

Create the HTML structure for the app interface. 

Style the app using CSS to make it visually appealing. 

JavaScript Interaction:  

Implement user input (e.g., city name) and search functionality. 

Display weather information dynamically (temperature, description) based on user input. 

Handle error cases (e.g., invalid city name). 

Back-End Development: (MARQUIS AND LESLIE) 

API Integration:  

Choose a reliable weather API (e.g., OpenWeatherMap, ClimaCell). 

Obtain an API key. 

Fetch weather data (current conditions, forecasts) using JavaScript. 

Data Processing:  

Parse the API response to extract relevant weather details. 

Convert temperature units (e.g., Celsius to Fahrenheit). 

Handle data errors gracefully. 

Quality Assurance and Testing:(Kyle and Darlington) 

Unit Testing:  

Test individual components (e.g., API calls, UI elements). 

Verify data accuracy and consistency. 

User Testing:  

Test the app with real users to identify any usability issues. 

Gather feedback and make necessary improvements. 

Deployment and Hosting: (Marquis) 

Choose a hosting platform (e.g., GitHub Pages, Netlify, Heroku). 

Deploy your app online. 

Ensure it works across different devices and browsers. 

Documentation and Maintenance:(Leslie) 

Write clear documentation for your codebase. 

Document the API usage and any other dependencies. 

Plan for future maintenance and updates. 

 

Marquis Reaves-    The weather app aims to provide users with accurate and reliable weather forecasts to help them plan their activities efficiently and stay informed about weather conditions. 

In today's fast-paced world, weather plays a crucial role in daily activities, travel plans, and outdoor adventures. A weather app offers real-time updates, forecasts, and alerts, enabling users to make informed decisions and stay prepared for changing weather conditions. 

Accurate Weather Forecasts: Provides real-time weather updates and forecasts for various locations. 

Customizable Alerts: Users can set up personalized alerts for specific weather conditions, such as storms or extreme temperatures. 

Intuitive User Interface: Offers a user-friendly interface with easy navigation and interactive features. 

Multi-Platform Support: Available on both mobile and web platforms for accessibility across devices. 

Target Audience: The app caters to general users, travelers, outdoor enthusiasts, and anyone who needs reliable weather information. 

Solution: 

The weather app will consist of front-end and back-end components. The front end will include user interfaces for mobile and web platforms, while the back end will manage data retrieval, processing, and storage. 

The app will fetch weather data from reliable APIs, process it, and present it to users in an easily understandable format. Users can search for locations, view current conditions, check forecasts, and receive alerts based on their preferences. 

The user interface will feature screens for location search, current weather display, forecast view, settings, and alerts management. Navigation will be intuitive, with options for manual location input or automatic detection through GPS. 

The app will integrate with reputable weather data providers to ensure the accuracy and reliability of forecasts. 

User accounts will be optional, allowing users to personalize features such as saving favorite locations and customizing settings. 

The app will use GPS for automatic location detection but will also support manual input for flexibility. 

Real-time data and forecasts will be fetched from weather APIs to provide up-to-date information. 

Weather data, including temperature, humidity, wind speed, and forecasts, will be presented using clear and visually appealing graphics. 

Users can receive alerts and notifications for severe weather warnings or customized conditions they set. 

The app will support different units for temperature (Celsius vs. Fahrenheit) and measurement systems (metric vs. imperial) to accommodate user preferences. 

Limited offline functionality will be available, with essential data cached for offline use. 

The app will undergo rigorous testing, including unit tests, integration tests, and user testing, to ensure reliability and usability. 

The app will be deployed on app stores for mobile platforms and accessible via web browsers for desktop users. Regular updates and maintenance will be conducted to ensure optimal performance and reliability. 

  

 

The National Weather Service (NWS) API:  

https://www.weather.gov/documentation/services-web-api 

https://www.weather.gov/media/owp/oh/hrl/docs/Java_Programming_Standards_and_Guidelines_V_2.0.pdf 

The API is based upon of JSON-LD 

NWS API GitHub site: https://weather-gov.github.io/api/ 

https://www.tomorrow.io/a/faq/weather-api/how-do-you-use-a-weather-api-in-javajs/ 

**Edited to utilize NWS API instead 

import java.net.*; 

import java.io.*; 

public class NWSExample { 

public static void main(String[] args) throws Exception { 

String apiKey = "NWS_API_KEY"; 

String location = "Bowie"; 

URL url = new URL(" https://api.weather.gov/gridpoints/{office}/{gridX},{gridY}/forecast “) 

HttpURLConnection con = (HttpURLConnection) url.openConnection(); 

con.setRequestMethod("GET"); 

BufferedReader in = new BufferedReader(new InputStreamReader(con.getInputStream())); 

String inputLine; 

StringBuffer response = new StringBuffer(); 

while ((inputLine = in.readLine()) != null) { 

response.append(inputLine); 

} 

in.close(); 

System.out.println(response.toString()); 

} 

} 

 

 

 
